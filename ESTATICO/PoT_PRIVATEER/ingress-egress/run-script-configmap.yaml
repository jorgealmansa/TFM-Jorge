apiVersion: v1
kind: ConfigMap
metadata:
  name: pot-run-config
  namespace: scenario
data:
  run.sh: |
    #!/bin/sh
 
    if [ "$1" = "host" ]; then
        ethtool -K eth0 tx off sg off tso off
        if [ "$2" = "1" ]; then
            # Rutas para host1
            ip route add 10.1.2.0/24 via 10.1.1.2
        else
            # Rutas para host2
            ip route add 10.1.1.0/24 via 10.1.2.2
        fi
 
    elif [ $1 = "controller" ]; then
    sudo pip3 install confluent_kafka
    parameters_generation/gen_keys.sh $2
    sudo chmod 777 keys/ca.crt
    sudo cp controller/switch.py /home/p4/tutorials/utils/p4runtime_lib/switch.py
    sudo influxd &
    sleep 10
    influx -execute "CREATE DATABASE int_telemetry_db"
    p4c-bm2-ss --p4v 16 --p4runtime-files p4/pot.p4.p4info.txt -o p4/pot.json p4/pot.p4
    sleep 10
    python3 -u controller/runtimev2.py --p4info p4/pot.p4.p4info.txt --bmv2-json p4/pot.json --ssl
    sleep 20
    sudo python3 controller/collector_kafka.py -c $2 &
 
    elif [ "$1" = "evil" ]; then
        sudo ip route add 10.1.2.0/24 via 10.11.0.100
        sudo ip route add 10.1.1.0/24 via 10.10.0.100
 
    else
        # Cualquier otro argumento: asumimos que es uno de tus nodos P4
        # (ingressnode, middlenode, egressnode, etc.)
        sleep 10
        sudo sysctl -w net.ipv4.ip_forward=0
        sudo chmod 777 keys/server_"$1".crt
       
        grpc_port=$((49990 + $1))
        echo "[INFO] Nodo $1 usará el puerto gRPC $grpc_port"
        echo
        sudo simple_switch_grpc --no-p4 \
        -i 1@net1 -i 2@net2 -i 3@net3 \
        --log-file logs/"$1" \
        -- \
        --cpu-port 255 \
        --grpc-server-addr 0.0.0.0:$grpc_port &

 
    fi
 
    # Mantener el pod en ejecución
    tail -f /dev/null