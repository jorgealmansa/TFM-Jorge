apiVersion: apps/v1
kind: Deployment
metadata:
  name: host1
  namespace: scenario
spec:
  replicas: 1
  selector:
    matchLabels:
      app: host1
  template:
    metadata:
      labels:
        app: host1
      annotations:
        k8s.v1.cni.cncf.io/networks: |
          [
            {
              "name": "h1-ingress-net",
              "interface": "net1",
              "ips": [ "10.1.1.3/24" ],
              "gateway": "10.1.1.2", 
              "mac": "02:42:0a:01:01:03"
            }
          ]
    spec:
      containers:
      - name: host1
        image: jorgealmansa/scapy:latest
        securityContext:
          capabilities:
            add: ["NET_ADMIN"]
        command:
          - /bin/sh
          - -c
          - |
            # Desactiva offloads en la interfaz principal
            ethtool -K eth0 tx off sg off tso off
            # Ajustar permisos y ejecutar el script
            chmod +x /home/p4/pot/docker/run.sh
            /home/p4/pot/docker/run.sh host 1
        volumeMounts:
        - mountPath: /home/p4/pot
          name: pot-volume
        - mountPath: /home/p4/pot/docker/run.sh
          name: pot-run-config
          subPath: run.sh
          
      volumes:
      - name: pot-volume
        hostPath:
          path: /home/mw/PoT_PRIVATEER
          type: Directory
      - name: pot-run-config
        configMap:
          name: pot-run-config
          defaultMode: 0755
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: host2
  namespace: scenario
spec:
  replicas: 1
  selector:
    matchLabels:
      app: host2
  template:
    metadata:
      labels:
        app: host2
      annotations:
        k8s.v1.cni.cncf.io/networks: |
          [
            {
              "name": "egress-h2-net",
              "interface": "net1",
              "ips": [ "10.1.2.3/24" ],
              "gateway": "10.1.2.2",
              "mac": "02:42:0a:01:02:03"
            }
          ]
    spec:
      containers:
      - name: host2
        image: jorgealmansa/scapy:latest
        securityContext:
          capabilities:
            add: ["NET_ADMIN"]
        command:
          - /bin/sh
          - -c
          - |
            ethtool -K eth0 tx off sg off tso off
            chmod +x /home/p4/pot/docker/run.sh
            /home/p4/pot/docker/run.sh host 2
        volumeMounts:
        - mountPath: /home/p4/pot
          name: pot-volume
        - mountPath: /home/p4/pot/docker/run.sh
          name: pot-run-config
          subPath: run.sh
          
      volumes:
      - name: pot-volume
        hostPath:
          path: /home/mw/PoT_PRIVATEER
          type: Directory
      - name: pot-run-config
        configMap:
          name: pot-run-config
          defaultMode: 0755
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingressnode
  namespace: scenario
  
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ingressnode
  template:
    metadata:
      labels:
        app: ingressnode
      annotations:
        k8s.v1.cni.cncf.io/networks: |
          [
            {
              "name": "h1-ingress-net",
              "interface": "net1",
              "ips": [ "10.1.1.2/24" ],
              "mac": "02:42:0a:01:01:02"
            },
            {
              "name": "ingress-middle1-net",
              "interface": "net2",
              "ips": [ "10.0.1.3/24" ],
              "mac": "02:42:0a:00:01:03"
            },
            {
              "name": "controller-net",
              "interface": "net3",
              "ips": [ "10.0.0.11/24" ],
              "mac": "02:42:0a:00:00:0b"
            }
          ]
        io.containerd.cri.runtime-handler: kata-qemu-tdx
    spec:
      runtimeClassName: kata-qemu-tdx
      containers:
      - name: ingressnode
        image: jorgealmansa/p4-imagen:encrypted-pandora2
        securityContext:
          privileged: true
        command:
          - /bin/sh
          - -c
          - |
            
            chmod +x /home/p4/pot/docker/run.sh
            /home/p4/pot/docker/run.sh 11
        volumeMounts:
        - mountPath: /home/p4/pot
          name: pot-volume
        - mountPath: /home/p4/pot/docker/run.sh
          name: pot-run-config
          subPath: run.sh
          
      volumes:
      - name: pot-volume
        hostPath:
          path: /home/mw/PoT_PRIVATEER/keys
          type: Directory
      - name: pot-run-config
        configMap:
          name: pot-run-config
          defaultMode: 0755
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: middlenode-1
  namespace: scenario
spec:
  replicas: 1
  selector:
    matchLabels:
      app: middlenode-1
  template:
    metadata:
      labels:
        app: middlenode-1
      annotations:
        k8s.v1.cni.cncf.io/networks: |
          [
            {
              "name": "ingress-middle1-net",
              "interface": "net1",
              "ips": [ "10.0.1.2/24" ],
              "mac": "02:42:0a:00:01:02"
            },
            {
              "name": "middle1-pod1",
              "interface": "net2",
              "ips": [ "10.0.2.3/24" ],
              "mac": "02:42:0a:00:02:03"
            },
            {
              "name": "controller-net",
              "interface": "net3",
              "ips": [ "10.0.0.12/24" ],
              "mac": "02:42:0a:00:00:0c"
            }
          ]
        io.containerd.cri.runtime-handler: kata-qemu-tdx
    spec:
      runtimeClassName: kata-qemu-tdx
      containers:
      - name: middlenode-1
        image: jorgealmansa/p4-imagen:encrypted-pandora2
        securityContext:
          privileged: true
        command:
          - /bin/sh
          - -c
          - |
            
            chmod +x /home/p4/pot/docker/run.sh
            /home/p4/pot/docker/run.sh 12
        resources:
          requests:
            cpu: "1"  # Solicita 1 n√∫cleo de CPU
          limits:
            cpu: "1"
        volumeMounts:
        - mountPath: /home/p4/pot
          name: pot-volume
        - mountPath: /home/p4/pot/docker/run.sh
          name: pot-run-config
          subPath: run.sh
          
      volumes:
      - name: pot-volume
        hostPath:
          path: /home/mw/PoT_PRIVATEER/keys
          type: Directory
      - name: pot-run-config
        configMap:
          name: pot-run-config
          defaultMode: 0755
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: middlenode-2
  namespace: scenario
spec:
  replicas: 1
  selector:
    matchLabels:
      app: middlenode-2
  template:
    metadata:
      labels:
        app: middlenode-2
      annotations:
        k8s.v1.cni.cncf.io/networks: |
          [
            {
              "name": "pod2-m2",
              "interface": "net1",
              "ips": [ "10.0.2.2/24" ],
              "mac": "02:42:0a:00:02:02"
            },
            {
              "name": "middle2-egress-net",
              "interface": "net2",
              "ips": [ "10.0.3.3/24" ],
              "mac": "02:42:0a:00:03:03"
            },
            {
              "name": "controller-net",
              "interface": "net3",
              "ips": [ "10.0.0.13/24" ],
              "mac": "02:42:0a:00:00:0d"
            }
          ]
        io.containerd.cri.runtime-handler: kata-qemu-tdx
    spec:
      runtimeClassName: kata-qemu-tdx
      containers:
      - name: middlenode-2
        image: jorgealmansa/p4-imagen:encrypted-pandora2
        securityContext:
          privileged: true
        command:
          - /bin/sh
          - -c
          - |
            
            chmod +x /home/p4/pot/docker/run.sh
            /home/p4/pot/docker/run.sh 13
        volumeMounts:
        - mountPath: /home/p4/pot
          name: pot-volume
        - mountPath: /home/p4/pot/docker/run.sh
          name: pot-run-config
          subPath: run.sh
          
      volumes:
      - name: pot-volume
        hostPath:
          path: /home/mw/PoT_PRIVATEER/keys
          type: Directory
      - name: pot-run-config
        configMap:
          name: pot-run-config
          defaultMode: 0755
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: egressnode
  namespace: scenario
spec:
  replicas: 1
  selector:
    matchLabels:
      app: egressnode
  template:
    metadata:
      labels:
        app: egressnode
      annotations:
        k8s.v1.cni.cncf.io/networks: |
          [
            {
              "name": "middle2-egress-net",
              "interface": "net1",
              "ips": [ "10.0.3.2/24" ],
              "mac": "02:42:0a:00:03:02"
            },
            {
              "name": "egress-h2-net",
              "interface": "net2",
              "ips": [ "10.1.2.2/24" ],
              "mac": "02:42:0a:01:02:02"
            },
            {
              "name": "controller-net",
              "interface": "net3",
              "ips": [ "10.0.0.14/24" ],
              "mac": "02:42:0a:00:00:0e"
            }
            
          ]
        io.containerd.cri.runtime-handler: kata-qemu-tdx
    spec:
      runtimeClassName: kata-qemu-tdx
      containers:
      - name: egressnode
        image: jorgealmansa/p4-imagen:encrypted-pandora2
        securityContext:
          privileged: true
        command:
          - /bin/sh
          - -c
          - |
            
            sudo chmod +x /home/p4/pot/docker/run.sh
            sudo /home/p4/pot/docker/run.sh 14
        volumeMounts:
        - mountPath: /home/p4/pot
          name: pot-volume
        - mountPath: /home/p4/pot/docker/run.sh
          name: pot-run-config
          subPath: run.sh
          
      volumes:
      - name: pot-volume
        hostPath:
          path: /home/mw/PoT_PRIVATEER/keys
          type: Directory
      - name: pot-run-config
        configMap:
          name: pot-run-config
          defaultMode: 0755
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
  namespace: scenario
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
      annotations:
        k8s.v1.cni.cncf.io/networks: |
          [
            {
              "name": "kafka-net",
              "interface": "net1",
              "ips": [ "10.2.1.3/24" ]
            }
          ]
    spec:
      containers:
      - name: kafka
        image: bashj79/kafka-kraft
        ports:
        - containerPort: 9092
          name: plaintext
        - containerPort: 9093
          name: controller
        env:
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
        - name: KAFKA_PROCESS_ROLES
          value: "broker,controller"
        - name: KAFKA_NODE_ID
          value: "1"
        - name: KAFKA_CONTROLLER_QUORUM_VOTERS
          value: "1@10.2.1.3:9093"
        - name: KAFKA_LISTENERS
          value: "PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://10.2.1.3:9092"
        


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pod-1
  namespace: scenario
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pod-1
  template:
    metadata:
      labels:
        app: pod-1
      annotations:
        k8s.v1.cni.cncf.io/networks: |
          [
            {
              "name": "middle1-pod1",
              "interface": "net1",
              "ips": [ "10.0.2.4/24" ],
              "mac": "02:42:0a:00:02:02"
            },
            {
              "name": "pod2-m2",
              "interface": "net2",
              "ips": [ "10.0.2.5/24" ],
              "mac": "02:42:0a:00:02:03"
            }
          ]
    spec:
      containers:
      - name: pod-1
        image: jorgealmansa/scapy:latest
        securityContext:
          privileged: true
        command: ["/bin/sh", "-c"]
        args:
          - |
            apt-get update && apt-get install -y iptables iproute2 ethtool
            sysctl -w net.ipv4.ip_forward=1
            
            # Desactivar checksum offloading
            ethtool -K net1 tx off sg off tso off
            ethtool -K net2 tx off sg off tso off
            
            # Reglas de iptables para permitir el reenv√≠o de UDP
            iptables -A FORWARD -i net1 -o net2 -p udp -j ACCEPT
            iptables -A FORWARD -i net2 -o net1 -p udp -j ACCEPT

            ip route add 10.1.1.0/24 via 10.0.2.3 dev net1 
            ip route add 10.1.2.0/24 via 10.0.2.2 dev net2
            
            echo "=== Reglas de iptables ==="
            iptables -L -v -n
            
            echo "=== Interfaces de red ==="
            ip addr show
            
            tail -f /dev/null

