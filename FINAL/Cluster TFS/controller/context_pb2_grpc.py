# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import context_pb2 as context__pb2


class ContextServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListContextIds = channel.unary_unary(
                '/context.ContextService/ListContextIds',
                request_serializer=context__pb2.Empty.SerializeToString,
                response_deserializer=context__pb2.ContextIdList.FromString,
                )
        self.ListContexts = channel.unary_unary(
                '/context.ContextService/ListContexts',
                request_serializer=context__pb2.Empty.SerializeToString,
                response_deserializer=context__pb2.ContextList.FromString,
                )
        self.GetContext = channel.unary_unary(
                '/context.ContextService/GetContext',
                request_serializer=context__pb2.ContextId.SerializeToString,
                response_deserializer=context__pb2.Context.FromString,
                )
        self.SetContext = channel.unary_unary(
                '/context.ContextService/SetContext',
                request_serializer=context__pb2.Context.SerializeToString,
                response_deserializer=context__pb2.ContextId.FromString,
                )
        self.RemoveContext = channel.unary_unary(
                '/context.ContextService/RemoveContext',
                request_serializer=context__pb2.ContextId.SerializeToString,
                response_deserializer=context__pb2.Empty.FromString,
                )
        self.GetContextEvents = channel.unary_stream(
                '/context.ContextService/GetContextEvents',
                request_serializer=context__pb2.Empty.SerializeToString,
                response_deserializer=context__pb2.ContextEvent.FromString,
                )
        self.ListTopologyIds = channel.unary_unary(
                '/context.ContextService/ListTopologyIds',
                request_serializer=context__pb2.ContextId.SerializeToString,
                response_deserializer=context__pb2.TopologyIdList.FromString,
                )
        self.ListTopologies = channel.unary_unary(
                '/context.ContextService/ListTopologies',
                request_serializer=context__pb2.ContextId.SerializeToString,
                response_deserializer=context__pb2.TopologyList.FromString,
                )
        self.GetTopology = channel.unary_unary(
                '/context.ContextService/GetTopology',
                request_serializer=context__pb2.TopologyId.SerializeToString,
                response_deserializer=context__pb2.Topology.FromString,
                )
        self.GetTopologyDetails = channel.unary_unary(
                '/context.ContextService/GetTopologyDetails',
                request_serializer=context__pb2.TopologyId.SerializeToString,
                response_deserializer=context__pb2.TopologyDetails.FromString,
                )
        self.SetTopology = channel.unary_unary(
                '/context.ContextService/SetTopology',
                request_serializer=context__pb2.Topology.SerializeToString,
                response_deserializer=context__pb2.TopologyId.FromString,
                )
        self.RemoveTopology = channel.unary_unary(
                '/context.ContextService/RemoveTopology',
                request_serializer=context__pb2.TopologyId.SerializeToString,
                response_deserializer=context__pb2.Empty.FromString,
                )
        self.GetTopologyEvents = channel.unary_stream(
                '/context.ContextService/GetTopologyEvents',
                request_serializer=context__pb2.Empty.SerializeToString,
                response_deserializer=context__pb2.TopologyEvent.FromString,
                )
        self.ListDeviceIds = channel.unary_unary(
                '/context.ContextService/ListDeviceIds',
                request_serializer=context__pb2.Empty.SerializeToString,
                response_deserializer=context__pb2.DeviceIdList.FromString,
                )
        self.ListDevices = channel.unary_unary(
                '/context.ContextService/ListDevices',
                request_serializer=context__pb2.Empty.SerializeToString,
                response_deserializer=context__pb2.DeviceList.FromString,
                )
        self.GetDevice = channel.unary_unary(
                '/context.ContextService/GetDevice',
                request_serializer=context__pb2.DeviceId.SerializeToString,
                response_deserializer=context__pb2.Device.FromString,
                )
        self.SetDevice = channel.unary_unary(
                '/context.ContextService/SetDevice',
                request_serializer=context__pb2.Device.SerializeToString,
                response_deserializer=context__pb2.DeviceId.FromString,
                )
        self.RemoveDevice = channel.unary_unary(
                '/context.ContextService/RemoveDevice',
                request_serializer=context__pb2.DeviceId.SerializeToString,
                response_deserializer=context__pb2.Empty.FromString,
                )
        self.GetDeviceEvents = channel.unary_stream(
                '/context.ContextService/GetDeviceEvents',
                request_serializer=context__pb2.Empty.SerializeToString,
                response_deserializer=context__pb2.DeviceEvent.FromString,
                )
        self.SelectDevice = channel.unary_unary(
                '/context.ContextService/SelectDevice',
                request_serializer=context__pb2.DeviceFilter.SerializeToString,
                response_deserializer=context__pb2.DeviceList.FromString,
                )
        self.ListEndPointNames = channel.unary_unary(
                '/context.ContextService/ListEndPointNames',
                request_serializer=context__pb2.EndPointIdList.SerializeToString,
                response_deserializer=context__pb2.EndPointNameList.FromString,
                )
        self.ListLinkIds = channel.unary_unary(
                '/context.ContextService/ListLinkIds',
                request_serializer=context__pb2.Empty.SerializeToString,
                response_deserializer=context__pb2.LinkIdList.FromString,
                )
        self.ListLinks = channel.unary_unary(
                '/context.ContextService/ListLinks',
                request_serializer=context__pb2.Empty.SerializeToString,
                response_deserializer=context__pb2.LinkList.FromString,
                )
        self.GetLink = channel.unary_unary(
                '/context.ContextService/GetLink',
                request_serializer=context__pb2.LinkId.SerializeToString,
                response_deserializer=context__pb2.Link.FromString,
                )
        self.SetLink = channel.unary_unary(
                '/context.ContextService/SetLink',
                request_serializer=context__pb2.Link.SerializeToString,
                response_deserializer=context__pb2.LinkId.FromString,
                )
        self.RemoveLink = channel.unary_unary(
                '/context.ContextService/RemoveLink',
                request_serializer=context__pb2.LinkId.SerializeToString,
                response_deserializer=context__pb2.Empty.FromString,
                )
        self.GetLinkEvents = channel.unary_stream(
                '/context.ContextService/GetLinkEvents',
                request_serializer=context__pb2.Empty.SerializeToString,
                response_deserializer=context__pb2.LinkEvent.FromString,
                )
        self.ListServiceIds = channel.unary_unary(
                '/context.ContextService/ListServiceIds',
                request_serializer=context__pb2.ContextId.SerializeToString,
                response_deserializer=context__pb2.ServiceIdList.FromString,
                )
        self.ListServices = channel.unary_unary(
                '/context.ContextService/ListServices',
                request_serializer=context__pb2.ContextId.SerializeToString,
                response_deserializer=context__pb2.ServiceList.FromString,
                )
        self.GetService = channel.unary_unary(
                '/context.ContextService/GetService',
                request_serializer=context__pb2.ServiceId.SerializeToString,
                response_deserializer=context__pb2.Service.FromString,
                )
        self.SetService = channel.unary_unary(
                '/context.ContextService/SetService',
                request_serializer=context__pb2.Service.SerializeToString,
                response_deserializer=context__pb2.ServiceId.FromString,
                )
        self.UnsetService = channel.unary_unary(
                '/context.ContextService/UnsetService',
                request_serializer=context__pb2.Service.SerializeToString,
                response_deserializer=context__pb2.ServiceId.FromString,
                )
        self.RemoveService = channel.unary_unary(
                '/context.ContextService/RemoveService',
                request_serializer=context__pb2.ServiceId.SerializeToString,
                response_deserializer=context__pb2.Empty.FromString,
                )
        self.GetServiceEvents = channel.unary_stream(
                '/context.ContextService/GetServiceEvents',
                request_serializer=context__pb2.Empty.SerializeToString,
                response_deserializer=context__pb2.ServiceEvent.FromString,
                )
        self.SelectService = channel.unary_unary(
                '/context.ContextService/SelectService',
                request_serializer=context__pb2.ServiceFilter.SerializeToString,
                response_deserializer=context__pb2.ServiceList.FromString,
                )
        self.ListSliceIds = channel.unary_unary(
                '/context.ContextService/ListSliceIds',
                request_serializer=context__pb2.ContextId.SerializeToString,
                response_deserializer=context__pb2.SliceIdList.FromString,
                )
        self.ListSlices = channel.unary_unary(
                '/context.ContextService/ListSlices',
                request_serializer=context__pb2.ContextId.SerializeToString,
                response_deserializer=context__pb2.SliceList.FromString,
                )
        self.GetSlice = channel.unary_unary(
                '/context.ContextService/GetSlice',
                request_serializer=context__pb2.SliceId.SerializeToString,
                response_deserializer=context__pb2.Slice.FromString,
                )
        self.SetSlice = channel.unary_unary(
                '/context.ContextService/SetSlice',
                request_serializer=context__pb2.Slice.SerializeToString,
                response_deserializer=context__pb2.SliceId.FromString,
                )
        self.UnsetSlice = channel.unary_unary(
                '/context.ContextService/UnsetSlice',
                request_serializer=context__pb2.Slice.SerializeToString,
                response_deserializer=context__pb2.SliceId.FromString,
                )
        self.RemoveSlice = channel.unary_unary(
                '/context.ContextService/RemoveSlice',
                request_serializer=context__pb2.SliceId.SerializeToString,
                response_deserializer=context__pb2.Empty.FromString,
                )
        self.GetSliceEvents = channel.unary_stream(
                '/context.ContextService/GetSliceEvents',
                request_serializer=context__pb2.Empty.SerializeToString,
                response_deserializer=context__pb2.SliceEvent.FromString,
                )
        self.SelectSlice = channel.unary_unary(
                '/context.ContextService/SelectSlice',
                request_serializer=context__pb2.SliceFilter.SerializeToString,
                response_deserializer=context__pb2.SliceList.FromString,
                )
        self.ListConnectionIds = channel.unary_unary(
                '/context.ContextService/ListConnectionIds',
                request_serializer=context__pb2.ServiceId.SerializeToString,
                response_deserializer=context__pb2.ConnectionIdList.FromString,
                )
        self.ListConnections = channel.unary_unary(
                '/context.ContextService/ListConnections',
                request_serializer=context__pb2.ServiceId.SerializeToString,
                response_deserializer=context__pb2.ConnectionList.FromString,
                )
        self.GetConnection = channel.unary_unary(
                '/context.ContextService/GetConnection',
                request_serializer=context__pb2.ConnectionId.SerializeToString,
                response_deserializer=context__pb2.Connection.FromString,
                )
        self.SetConnection = channel.unary_unary(
                '/context.ContextService/SetConnection',
                request_serializer=context__pb2.Connection.SerializeToString,
                response_deserializer=context__pb2.ConnectionId.FromString,
                )
        self.RemoveConnection = channel.unary_unary(
                '/context.ContextService/RemoveConnection',
                request_serializer=context__pb2.ConnectionId.SerializeToString,
                response_deserializer=context__pb2.Empty.FromString,
                )
        self.GetConnectionEvents = channel.unary_stream(
                '/context.ContextService/GetConnectionEvents',
                request_serializer=context__pb2.Empty.SerializeToString,
                response_deserializer=context__pb2.ConnectionEvent.FromString,
                )
        self.GetOpticalConfig = channel.unary_unary(
                '/context.ContextService/GetOpticalConfig',
                request_serializer=context__pb2.Empty.SerializeToString,
                response_deserializer=context__pb2.OpticalConfigList.FromString,
                )
        self.SetOpticalConfig = channel.unary_unary(
                '/context.ContextService/SetOpticalConfig',
                request_serializer=context__pb2.OpticalConfig.SerializeToString,
                response_deserializer=context__pb2.OpticalConfigId.FromString,
                )
        self.UpdateOpticalConfig = channel.unary_unary(
                '/context.ContextService/UpdateOpticalConfig',
                request_serializer=context__pb2.OpticalConfig.SerializeToString,
                response_deserializer=context__pb2.OpticalConfigId.FromString,
                )
        self.SelectOpticalConfig = channel.unary_unary(
                '/context.ContextService/SelectOpticalConfig',
                request_serializer=context__pb2.OpticalConfigId.SerializeToString,
                response_deserializer=context__pb2.OpticalConfig.FromString,
                )
        self.DeleteOpticalConfig = channel.unary_unary(
                '/context.ContextService/DeleteOpticalConfig',
                request_serializer=context__pb2.OpticalConfigId.SerializeToString,
                response_deserializer=context__pb2.Empty.FromString,
                )
        self.DeleteOpticalChannel = channel.unary_unary(
                '/context.ContextService/DeleteOpticalChannel',
                request_serializer=context__pb2.OpticalConfig.SerializeToString,
                response_deserializer=context__pb2.Empty.FromString,
                )
        self.SetOpticalLink = channel.unary_unary(
                '/context.ContextService/SetOpticalLink',
                request_serializer=context__pb2.OpticalLink.SerializeToString,
                response_deserializer=context__pb2.Empty.FromString,
                )
        self.GetOpticalLink = channel.unary_unary(
                '/context.ContextService/GetOpticalLink',
                request_serializer=context__pb2.LinkId.SerializeToString,
                response_deserializer=context__pb2.OpticalLink.FromString,
                )
        self.DeleteOpticalLink = channel.unary_unary(
                '/context.ContextService/DeleteOpticalLink',
                request_serializer=context__pb2.LinkId.SerializeToString,
                response_deserializer=context__pb2.Empty.FromString,
                )
        self.GetOpticalLinkList = channel.unary_unary(
                '/context.ContextService/GetOpticalLinkList',
                request_serializer=context__pb2.Empty.SerializeToString,
                response_deserializer=context__pb2.OpticalLinkList.FromString,
                )
        self.DeleteServiceConfigRule = channel.unary_unary(
                '/context.ContextService/DeleteServiceConfigRule',
                request_serializer=context__pb2.ServiceConfigRule.SerializeToString,
                response_deserializer=context__pb2.Empty.FromString,
                )


class ContextServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListContextIds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListContexts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetContext(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetContext(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveContext(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetContextEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTopologyIds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTopologies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTopology(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTopologyDetails(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTopology(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveTopology(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTopologyEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDeviceIds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDevices(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDevice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDevice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveDevice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDeviceEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SelectDevice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListEndPointNames(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListLinkIds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListLinks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLink(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetLink(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveLink(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLinkEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListServiceIds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListServices(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnsetService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetServiceEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SelectService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSliceIds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSlices(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSlice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSlice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnsetSlice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveSlice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSliceEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SelectSlice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListConnectionIds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListConnections(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetConnection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetConnection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveConnection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetConnectionEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOpticalConfig(self, request, context):
        """------------------------------ Experimental -----------------------------
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetOpticalConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateOpticalConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SelectOpticalConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteOpticalConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteOpticalChannel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetOpticalLink(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOpticalLink(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteOpticalLink(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOpticalLinkList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteServiceConfigRule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ContextServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListContextIds': grpc.unary_unary_rpc_method_handler(
                    servicer.ListContextIds,
                    request_deserializer=context__pb2.Empty.FromString,
                    response_serializer=context__pb2.ContextIdList.SerializeToString,
            ),
            'ListContexts': grpc.unary_unary_rpc_method_handler(
                    servicer.ListContexts,
                    request_deserializer=context__pb2.Empty.FromString,
                    response_serializer=context__pb2.ContextList.SerializeToString,
            ),
            'GetContext': grpc.unary_unary_rpc_method_handler(
                    servicer.GetContext,
                    request_deserializer=context__pb2.ContextId.FromString,
                    response_serializer=context__pb2.Context.SerializeToString,
            ),
            'SetContext': grpc.unary_unary_rpc_method_handler(
                    servicer.SetContext,
                    request_deserializer=context__pb2.Context.FromString,
                    response_serializer=context__pb2.ContextId.SerializeToString,
            ),
            'RemoveContext': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveContext,
                    request_deserializer=context__pb2.ContextId.FromString,
                    response_serializer=context__pb2.Empty.SerializeToString,
            ),
            'GetContextEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.GetContextEvents,
                    request_deserializer=context__pb2.Empty.FromString,
                    response_serializer=context__pb2.ContextEvent.SerializeToString,
            ),
            'ListTopologyIds': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTopologyIds,
                    request_deserializer=context__pb2.ContextId.FromString,
                    response_serializer=context__pb2.TopologyIdList.SerializeToString,
            ),
            'ListTopologies': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTopologies,
                    request_deserializer=context__pb2.ContextId.FromString,
                    response_serializer=context__pb2.TopologyList.SerializeToString,
            ),
            'GetTopology': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTopology,
                    request_deserializer=context__pb2.TopologyId.FromString,
                    response_serializer=context__pb2.Topology.SerializeToString,
            ),
            'GetTopologyDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTopologyDetails,
                    request_deserializer=context__pb2.TopologyId.FromString,
                    response_serializer=context__pb2.TopologyDetails.SerializeToString,
            ),
            'SetTopology': grpc.unary_unary_rpc_method_handler(
                    servicer.SetTopology,
                    request_deserializer=context__pb2.Topology.FromString,
                    response_serializer=context__pb2.TopologyId.SerializeToString,
            ),
            'RemoveTopology': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveTopology,
                    request_deserializer=context__pb2.TopologyId.FromString,
                    response_serializer=context__pb2.Empty.SerializeToString,
            ),
            'GetTopologyEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.GetTopologyEvents,
                    request_deserializer=context__pb2.Empty.FromString,
                    response_serializer=context__pb2.TopologyEvent.SerializeToString,
            ),
            'ListDeviceIds': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDeviceIds,
                    request_deserializer=context__pb2.Empty.FromString,
                    response_serializer=context__pb2.DeviceIdList.SerializeToString,
            ),
            'ListDevices': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDevices,
                    request_deserializer=context__pb2.Empty.FromString,
                    response_serializer=context__pb2.DeviceList.SerializeToString,
            ),
            'GetDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDevice,
                    request_deserializer=context__pb2.DeviceId.FromString,
                    response_serializer=context__pb2.Device.SerializeToString,
            ),
            'SetDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDevice,
                    request_deserializer=context__pb2.Device.FromString,
                    response_serializer=context__pb2.DeviceId.SerializeToString,
            ),
            'RemoveDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveDevice,
                    request_deserializer=context__pb2.DeviceId.FromString,
                    response_serializer=context__pb2.Empty.SerializeToString,
            ),
            'GetDeviceEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.GetDeviceEvents,
                    request_deserializer=context__pb2.Empty.FromString,
                    response_serializer=context__pb2.DeviceEvent.SerializeToString,
            ),
            'SelectDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.SelectDevice,
                    request_deserializer=context__pb2.DeviceFilter.FromString,
                    response_serializer=context__pb2.DeviceList.SerializeToString,
            ),
            'ListEndPointNames': grpc.unary_unary_rpc_method_handler(
                    servicer.ListEndPointNames,
                    request_deserializer=context__pb2.EndPointIdList.FromString,
                    response_serializer=context__pb2.EndPointNameList.SerializeToString,
            ),
            'ListLinkIds': grpc.unary_unary_rpc_method_handler(
                    servicer.ListLinkIds,
                    request_deserializer=context__pb2.Empty.FromString,
                    response_serializer=context__pb2.LinkIdList.SerializeToString,
            ),
            'ListLinks': grpc.unary_unary_rpc_method_handler(
                    servicer.ListLinks,
                    request_deserializer=context__pb2.Empty.FromString,
                    response_serializer=context__pb2.LinkList.SerializeToString,
            ),
            'GetLink': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLink,
                    request_deserializer=context__pb2.LinkId.FromString,
                    response_serializer=context__pb2.Link.SerializeToString,
            ),
            'SetLink': grpc.unary_unary_rpc_method_handler(
                    servicer.SetLink,
                    request_deserializer=context__pb2.Link.FromString,
                    response_serializer=context__pb2.LinkId.SerializeToString,
            ),
            'RemoveLink': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveLink,
                    request_deserializer=context__pb2.LinkId.FromString,
                    response_serializer=context__pb2.Empty.SerializeToString,
            ),
            'GetLinkEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.GetLinkEvents,
                    request_deserializer=context__pb2.Empty.FromString,
                    response_serializer=context__pb2.LinkEvent.SerializeToString,
            ),
            'ListServiceIds': grpc.unary_unary_rpc_method_handler(
                    servicer.ListServiceIds,
                    request_deserializer=context__pb2.ContextId.FromString,
                    response_serializer=context__pb2.ServiceIdList.SerializeToString,
            ),
            'ListServices': grpc.unary_unary_rpc_method_handler(
                    servicer.ListServices,
                    request_deserializer=context__pb2.ContextId.FromString,
                    response_serializer=context__pb2.ServiceList.SerializeToString,
            ),
            'GetService': grpc.unary_unary_rpc_method_handler(
                    servicer.GetService,
                    request_deserializer=context__pb2.ServiceId.FromString,
                    response_serializer=context__pb2.Service.SerializeToString,
            ),
            'SetService': grpc.unary_unary_rpc_method_handler(
                    servicer.SetService,
                    request_deserializer=context__pb2.Service.FromString,
                    response_serializer=context__pb2.ServiceId.SerializeToString,
            ),
            'UnsetService': grpc.unary_unary_rpc_method_handler(
                    servicer.UnsetService,
                    request_deserializer=context__pb2.Service.FromString,
                    response_serializer=context__pb2.ServiceId.SerializeToString,
            ),
            'RemoveService': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveService,
                    request_deserializer=context__pb2.ServiceId.FromString,
                    response_serializer=context__pb2.Empty.SerializeToString,
            ),
            'GetServiceEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.GetServiceEvents,
                    request_deserializer=context__pb2.Empty.FromString,
                    response_serializer=context__pb2.ServiceEvent.SerializeToString,
            ),
            'SelectService': grpc.unary_unary_rpc_method_handler(
                    servicer.SelectService,
                    request_deserializer=context__pb2.ServiceFilter.FromString,
                    response_serializer=context__pb2.ServiceList.SerializeToString,
            ),
            'ListSliceIds': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSliceIds,
                    request_deserializer=context__pb2.ContextId.FromString,
                    response_serializer=context__pb2.SliceIdList.SerializeToString,
            ),
            'ListSlices': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSlices,
                    request_deserializer=context__pb2.ContextId.FromString,
                    response_serializer=context__pb2.SliceList.SerializeToString,
            ),
            'GetSlice': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSlice,
                    request_deserializer=context__pb2.SliceId.FromString,
                    response_serializer=context__pb2.Slice.SerializeToString,
            ),
            'SetSlice': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSlice,
                    request_deserializer=context__pb2.Slice.FromString,
                    response_serializer=context__pb2.SliceId.SerializeToString,
            ),
            'UnsetSlice': grpc.unary_unary_rpc_method_handler(
                    servicer.UnsetSlice,
                    request_deserializer=context__pb2.Slice.FromString,
                    response_serializer=context__pb2.SliceId.SerializeToString,
            ),
            'RemoveSlice': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveSlice,
                    request_deserializer=context__pb2.SliceId.FromString,
                    response_serializer=context__pb2.Empty.SerializeToString,
            ),
            'GetSliceEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.GetSliceEvents,
                    request_deserializer=context__pb2.Empty.FromString,
                    response_serializer=context__pb2.SliceEvent.SerializeToString,
            ),
            'SelectSlice': grpc.unary_unary_rpc_method_handler(
                    servicer.SelectSlice,
                    request_deserializer=context__pb2.SliceFilter.FromString,
                    response_serializer=context__pb2.SliceList.SerializeToString,
            ),
            'ListConnectionIds': grpc.unary_unary_rpc_method_handler(
                    servicer.ListConnectionIds,
                    request_deserializer=context__pb2.ServiceId.FromString,
                    response_serializer=context__pb2.ConnectionIdList.SerializeToString,
            ),
            'ListConnections': grpc.unary_unary_rpc_method_handler(
                    servicer.ListConnections,
                    request_deserializer=context__pb2.ServiceId.FromString,
                    response_serializer=context__pb2.ConnectionList.SerializeToString,
            ),
            'GetConnection': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConnection,
                    request_deserializer=context__pb2.ConnectionId.FromString,
                    response_serializer=context__pb2.Connection.SerializeToString,
            ),
            'SetConnection': grpc.unary_unary_rpc_method_handler(
                    servicer.SetConnection,
                    request_deserializer=context__pb2.Connection.FromString,
                    response_serializer=context__pb2.ConnectionId.SerializeToString,
            ),
            'RemoveConnection': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveConnection,
                    request_deserializer=context__pb2.ConnectionId.FromString,
                    response_serializer=context__pb2.Empty.SerializeToString,
            ),
            'GetConnectionEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.GetConnectionEvents,
                    request_deserializer=context__pb2.Empty.FromString,
                    response_serializer=context__pb2.ConnectionEvent.SerializeToString,
            ),
            'GetOpticalConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOpticalConfig,
                    request_deserializer=context__pb2.Empty.FromString,
                    response_serializer=context__pb2.OpticalConfigList.SerializeToString,
            ),
            'SetOpticalConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.SetOpticalConfig,
                    request_deserializer=context__pb2.OpticalConfig.FromString,
                    response_serializer=context__pb2.OpticalConfigId.SerializeToString,
            ),
            'UpdateOpticalConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateOpticalConfig,
                    request_deserializer=context__pb2.OpticalConfig.FromString,
                    response_serializer=context__pb2.OpticalConfigId.SerializeToString,
            ),
            'SelectOpticalConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.SelectOpticalConfig,
                    request_deserializer=context__pb2.OpticalConfigId.FromString,
                    response_serializer=context__pb2.OpticalConfig.SerializeToString,
            ),
            'DeleteOpticalConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteOpticalConfig,
                    request_deserializer=context__pb2.OpticalConfigId.FromString,
                    response_serializer=context__pb2.Empty.SerializeToString,
            ),
            'DeleteOpticalChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteOpticalChannel,
                    request_deserializer=context__pb2.OpticalConfig.FromString,
                    response_serializer=context__pb2.Empty.SerializeToString,
            ),
            'SetOpticalLink': grpc.unary_unary_rpc_method_handler(
                    servicer.SetOpticalLink,
                    request_deserializer=context__pb2.OpticalLink.FromString,
                    response_serializer=context__pb2.Empty.SerializeToString,
            ),
            'GetOpticalLink': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOpticalLink,
                    request_deserializer=context__pb2.LinkId.FromString,
                    response_serializer=context__pb2.OpticalLink.SerializeToString,
            ),
            'DeleteOpticalLink': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteOpticalLink,
                    request_deserializer=context__pb2.LinkId.FromString,
                    response_serializer=context__pb2.Empty.SerializeToString,
            ),
            'GetOpticalLinkList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOpticalLinkList,
                    request_deserializer=context__pb2.Empty.FromString,
                    response_serializer=context__pb2.OpticalLinkList.SerializeToString,
            ),
            'DeleteServiceConfigRule': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteServiceConfigRule,
                    request_deserializer=context__pb2.ServiceConfigRule.FromString,
                    response_serializer=context__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'context.ContextService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ContextService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListContextIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/ListContextIds',
            context__pb2.Empty.SerializeToString,
            context__pb2.ContextIdList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListContexts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/ListContexts',
            context__pb2.Empty.SerializeToString,
            context__pb2.ContextList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetContext(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/GetContext',
            context__pb2.ContextId.SerializeToString,
            context__pb2.Context.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetContext(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/SetContext',
            context__pb2.Context.SerializeToString,
            context__pb2.ContextId.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveContext(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/RemoveContext',
            context__pb2.ContextId.SerializeToString,
            context__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetContextEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/context.ContextService/GetContextEvents',
            context__pb2.Empty.SerializeToString,
            context__pb2.ContextEvent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTopologyIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/ListTopologyIds',
            context__pb2.ContextId.SerializeToString,
            context__pb2.TopologyIdList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTopologies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/ListTopologies',
            context__pb2.ContextId.SerializeToString,
            context__pb2.TopologyList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTopology(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/GetTopology',
            context__pb2.TopologyId.SerializeToString,
            context__pb2.Topology.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTopologyDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/GetTopologyDetails',
            context__pb2.TopologyId.SerializeToString,
            context__pb2.TopologyDetails.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetTopology(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/SetTopology',
            context__pb2.Topology.SerializeToString,
            context__pb2.TopologyId.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveTopology(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/RemoveTopology',
            context__pb2.TopologyId.SerializeToString,
            context__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTopologyEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/context.ContextService/GetTopologyEvents',
            context__pb2.Empty.SerializeToString,
            context__pb2.TopologyEvent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListDeviceIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/ListDeviceIds',
            context__pb2.Empty.SerializeToString,
            context__pb2.DeviceIdList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListDevices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/ListDevices',
            context__pb2.Empty.SerializeToString,
            context__pb2.DeviceList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/GetDevice',
            context__pb2.DeviceId.SerializeToString,
            context__pb2.Device.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/SetDevice',
            context__pb2.Device.SerializeToString,
            context__pb2.DeviceId.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/RemoveDevice',
            context__pb2.DeviceId.SerializeToString,
            context__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDeviceEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/context.ContextService/GetDeviceEvents',
            context__pb2.Empty.SerializeToString,
            context__pb2.DeviceEvent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SelectDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/SelectDevice',
            context__pb2.DeviceFilter.SerializeToString,
            context__pb2.DeviceList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListEndPointNames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/ListEndPointNames',
            context__pb2.EndPointIdList.SerializeToString,
            context__pb2.EndPointNameList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListLinkIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/ListLinkIds',
            context__pb2.Empty.SerializeToString,
            context__pb2.LinkIdList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListLinks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/ListLinks',
            context__pb2.Empty.SerializeToString,
            context__pb2.LinkList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLink(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/GetLink',
            context__pb2.LinkId.SerializeToString,
            context__pb2.Link.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetLink(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/SetLink',
            context__pb2.Link.SerializeToString,
            context__pb2.LinkId.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveLink(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/RemoveLink',
            context__pb2.LinkId.SerializeToString,
            context__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLinkEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/context.ContextService/GetLinkEvents',
            context__pb2.Empty.SerializeToString,
            context__pb2.LinkEvent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListServiceIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/ListServiceIds',
            context__pb2.ContextId.SerializeToString,
            context__pb2.ServiceIdList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListServices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/ListServices',
            context__pb2.ContextId.SerializeToString,
            context__pb2.ServiceList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/GetService',
            context__pb2.ServiceId.SerializeToString,
            context__pb2.Service.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/SetService',
            context__pb2.Service.SerializeToString,
            context__pb2.ServiceId.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnsetService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/UnsetService',
            context__pb2.Service.SerializeToString,
            context__pb2.ServiceId.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/RemoveService',
            context__pb2.ServiceId.SerializeToString,
            context__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetServiceEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/context.ContextService/GetServiceEvents',
            context__pb2.Empty.SerializeToString,
            context__pb2.ServiceEvent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SelectService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/SelectService',
            context__pb2.ServiceFilter.SerializeToString,
            context__pb2.ServiceList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListSliceIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/ListSliceIds',
            context__pb2.ContextId.SerializeToString,
            context__pb2.SliceIdList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListSlices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/ListSlices',
            context__pb2.ContextId.SerializeToString,
            context__pb2.SliceList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSlice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/GetSlice',
            context__pb2.SliceId.SerializeToString,
            context__pb2.Slice.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetSlice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/SetSlice',
            context__pb2.Slice.SerializeToString,
            context__pb2.SliceId.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnsetSlice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/UnsetSlice',
            context__pb2.Slice.SerializeToString,
            context__pb2.SliceId.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveSlice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/RemoveSlice',
            context__pb2.SliceId.SerializeToString,
            context__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSliceEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/context.ContextService/GetSliceEvents',
            context__pb2.Empty.SerializeToString,
            context__pb2.SliceEvent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SelectSlice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/SelectSlice',
            context__pb2.SliceFilter.SerializeToString,
            context__pb2.SliceList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListConnectionIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/ListConnectionIds',
            context__pb2.ServiceId.SerializeToString,
            context__pb2.ConnectionIdList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListConnections(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/ListConnections',
            context__pb2.ServiceId.SerializeToString,
            context__pb2.ConnectionList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetConnection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/GetConnection',
            context__pb2.ConnectionId.SerializeToString,
            context__pb2.Connection.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetConnection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/SetConnection',
            context__pb2.Connection.SerializeToString,
            context__pb2.ConnectionId.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveConnection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/RemoveConnection',
            context__pb2.ConnectionId.SerializeToString,
            context__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetConnectionEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/context.ContextService/GetConnectionEvents',
            context__pb2.Empty.SerializeToString,
            context__pb2.ConnectionEvent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOpticalConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/GetOpticalConfig',
            context__pb2.Empty.SerializeToString,
            context__pb2.OpticalConfigList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetOpticalConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/SetOpticalConfig',
            context__pb2.OpticalConfig.SerializeToString,
            context__pb2.OpticalConfigId.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateOpticalConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/UpdateOpticalConfig',
            context__pb2.OpticalConfig.SerializeToString,
            context__pb2.OpticalConfigId.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SelectOpticalConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/SelectOpticalConfig',
            context__pb2.OpticalConfigId.SerializeToString,
            context__pb2.OpticalConfig.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteOpticalConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/DeleteOpticalConfig',
            context__pb2.OpticalConfigId.SerializeToString,
            context__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteOpticalChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/DeleteOpticalChannel',
            context__pb2.OpticalConfig.SerializeToString,
            context__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetOpticalLink(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/SetOpticalLink',
            context__pb2.OpticalLink.SerializeToString,
            context__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOpticalLink(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/GetOpticalLink',
            context__pb2.LinkId.SerializeToString,
            context__pb2.OpticalLink.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteOpticalLink(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/DeleteOpticalLink',
            context__pb2.LinkId.SerializeToString,
            context__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOpticalLinkList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/GetOpticalLinkList',
            context__pb2.Empty.SerializeToString,
            context__pb2.OpticalLinkList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteServiceConfigRule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/context.ContextService/DeleteServiceConfigRule',
            context__pb2.ServiceConfigRule.SerializeToString,
            context__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
