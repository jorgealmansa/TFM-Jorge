# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.tapi_connectivity_connectivity_context import TapiConnectivityConnectivityContext  # noqa: F401,E501
from tapi_server import util


class TapiConnectivityConnectivityContextWrapper(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, tapi_connectivityconnectivity_context: TapiConnectivityConnectivityContext=None):  # noqa: E501
        """TapiConnectivityConnectivityContextWrapper - a model defined in Swagger

        :param tapi_connectivityconnectivity_context: The tapi_connectivityconnectivity_context of this TapiConnectivityConnectivityContextWrapper.  # noqa: E501
        :type tapi_connectivityconnectivity_context: TapiConnectivityConnectivityContext
        """
        self.swagger_types = {
            'tapi_connectivityconnectivity_context': TapiConnectivityConnectivityContext
        }

        self.attribute_map = {
            'tapi_connectivityconnectivity_context': 'tapi-connectivity:connectivity-context'
        }
        self._tapi_connectivityconnectivity_context = tapi_connectivityconnectivity_context

    @classmethod
    def from_dict(cls, dikt) -> 'TapiConnectivityConnectivityContextWrapper':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tapi.connectivity.ConnectivityContextWrapper of this TapiConnectivityConnectivityContextWrapper.  # noqa: E501
        :rtype: TapiConnectivityConnectivityContextWrapper
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tapi_connectivityconnectivity_context(self) -> TapiConnectivityConnectivityContext:
        """Gets the tapi_connectivityconnectivity_context of this TapiConnectivityConnectivityContextWrapper.


        :return: The tapi_connectivityconnectivity_context of this TapiConnectivityConnectivityContextWrapper.
        :rtype: TapiConnectivityConnectivityContext
        """
        return self._tapi_connectivityconnectivity_context

    @tapi_connectivityconnectivity_context.setter
    def tapi_connectivityconnectivity_context(self, tapi_connectivityconnectivity_context: TapiConnectivityConnectivityContext):
        """Sets the tapi_connectivityconnectivity_context of this TapiConnectivityConnectivityContextWrapper.


        :param tapi_connectivityconnectivity_context: The tapi_connectivityconnectivity_context of this TapiConnectivityConnectivityContextWrapper.
        :type tapi_connectivityconnectivity_context: TapiConnectivityConnectivityContext
        """

        self._tapi_connectivityconnectivity_context = tapi_connectivityconnectivity_context
