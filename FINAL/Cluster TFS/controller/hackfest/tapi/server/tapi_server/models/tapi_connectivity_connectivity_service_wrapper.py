# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.tapi_connectivity_connectivity_service import TapiConnectivityConnectivityService  # noqa: F401,E501
from tapi_server import util


class TapiConnectivityConnectivityServiceWrapper(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, connectivity_service: TapiConnectivityConnectivityService=None):  # noqa: E501
        """TapiConnectivityConnectivityServiceWrapper - a model defined in Swagger

        :param connectivity_service: The connectivity_service of this TapiConnectivityConnectivityServiceWrapper.  # noqa: E501
        :type connectivity_service: TapiConnectivityConnectivityService
        """
        self.swagger_types = {
            'connectivity_service': TapiConnectivityConnectivityService
        }

        self.attribute_map = {
            'connectivity_service': 'connectivity-service'
        }
        self._connectivity_service = connectivity_service

    @classmethod
    def from_dict(cls, dikt) -> 'TapiConnectivityConnectivityServiceWrapper':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tapi.connectivity.ConnectivityServiceWrapper of this TapiConnectivityConnectivityServiceWrapper.  # noqa: E501
        :rtype: TapiConnectivityConnectivityServiceWrapper
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connectivity_service(self) -> TapiConnectivityConnectivityService:
        """Gets the connectivity_service of this TapiConnectivityConnectivityServiceWrapper.


        :return: The connectivity_service of this TapiConnectivityConnectivityServiceWrapper.
        :rtype: TapiConnectivityConnectivityService
        """
        return self._connectivity_service

    @connectivity_service.setter
    def connectivity_service(self, connectivity_service: TapiConnectivityConnectivityService):
        """Sets the connectivity_service of this TapiConnectivityConnectivityServiceWrapper.


        :param connectivity_service: The connectivity_service of this TapiConnectivityConnectivityServiceWrapper.
        :type connectivity_service: TapiConnectivityConnectivityService
        """

        self._connectivity_service = connectivity_service
