# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.tapi_connectivity_switch import TapiConnectivitySwitch  # noqa: F401,E501
from tapi_server import util


class TapiConnectivitySwitchWrapper(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, switch: TapiConnectivitySwitch=None):  # noqa: E501
        """TapiConnectivitySwitchWrapper - a model defined in Swagger

        :param switch: The switch of this TapiConnectivitySwitchWrapper.  # noqa: E501
        :type switch: TapiConnectivitySwitch
        """
        self.swagger_types = {
            'switch': TapiConnectivitySwitch
        }

        self.attribute_map = {
            'switch': 'switch'
        }
        self._switch = switch

    @classmethod
    def from_dict(cls, dikt) -> 'TapiConnectivitySwitchWrapper':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tapi.connectivity.SwitchWrapper of this TapiConnectivitySwitchWrapper.  # noqa: E501
        :rtype: TapiConnectivitySwitchWrapper
        """
        return util.deserialize_model(dikt, cls)

    @property
    def switch(self) -> TapiConnectivitySwitch:
        """Gets the switch of this TapiConnectivitySwitchWrapper.


        :return: The switch of this TapiConnectivitySwitchWrapper.
        :rtype: TapiConnectivitySwitch
        """
        return self._switch

    @switch.setter
    def switch(self, switch: TapiConnectivitySwitch):
        """Sets the switch of this TapiConnectivitySwitchWrapper.


        :param switch: The switch of this TapiConnectivitySwitchWrapper.
        :type switch: TapiConnectivitySwitch
        """

        self._switch = switch
