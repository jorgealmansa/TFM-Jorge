# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.tapi_path_computation_routing_constraint import TapiPathComputationRoutingConstraint  # noqa: F401,E501
from tapi_server import util


class TapiPathComputationRoutingConstraintWrapper(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, routing_constraint: TapiPathComputationRoutingConstraint=None):  # noqa: E501
        """TapiPathComputationRoutingConstraintWrapper - a model defined in Swagger

        :param routing_constraint: The routing_constraint of this TapiPathComputationRoutingConstraintWrapper.  # noqa: E501
        :type routing_constraint: TapiPathComputationRoutingConstraint
        """
        self.swagger_types = {
            'routing_constraint': TapiPathComputationRoutingConstraint
        }

        self.attribute_map = {
            'routing_constraint': 'routing-constraint'
        }
        self._routing_constraint = routing_constraint

    @classmethod
    def from_dict(cls, dikt) -> 'TapiPathComputationRoutingConstraintWrapper':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tapi.path.computation.RoutingConstraintWrapper of this TapiPathComputationRoutingConstraintWrapper.  # noqa: E501
        :rtype: TapiPathComputationRoutingConstraintWrapper
        """
        return util.deserialize_model(dikt, cls)

    @property
    def routing_constraint(self) -> TapiPathComputationRoutingConstraint:
        """Gets the routing_constraint of this TapiPathComputationRoutingConstraintWrapper.


        :return: The routing_constraint of this TapiPathComputationRoutingConstraintWrapper.
        :rtype: TapiPathComputationRoutingConstraint
        """
        return self._routing_constraint

    @routing_constraint.setter
    def routing_constraint(self, routing_constraint: TapiPathComputationRoutingConstraint):
        """Sets the routing_constraint of this TapiPathComputationRoutingConstraintWrapper.


        :param routing_constraint: The routing_constraint of this TapiPathComputationRoutingConstraintWrapper.
        :type routing_constraint: TapiPathComputationRoutingConstraint
        """

        self._routing_constraint = routing_constraint
