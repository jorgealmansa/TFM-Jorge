# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.tapi_path_computation_topology_constraint import TapiPathComputationTopologyConstraint  # noqa: F401,E501
from tapi_server import util


class TapiPathComputationTopologyConstraintWrapper(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, topology_constraint: TapiPathComputationTopologyConstraint=None):  # noqa: E501
        """TapiPathComputationTopologyConstraintWrapper - a model defined in Swagger

        :param topology_constraint: The topology_constraint of this TapiPathComputationTopologyConstraintWrapper.  # noqa: E501
        :type topology_constraint: TapiPathComputationTopologyConstraint
        """
        self.swagger_types = {
            'topology_constraint': TapiPathComputationTopologyConstraint
        }

        self.attribute_map = {
            'topology_constraint': 'topology-constraint'
        }
        self._topology_constraint = topology_constraint

    @classmethod
    def from_dict(cls, dikt) -> 'TapiPathComputationTopologyConstraintWrapper':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tapi.path.computation.TopologyConstraintWrapper of this TapiPathComputationTopologyConstraintWrapper.  # noqa: E501
        :rtype: TapiPathComputationTopologyConstraintWrapper
        """
        return util.deserialize_model(dikt, cls)

    @property
    def topology_constraint(self) -> TapiPathComputationTopologyConstraint:
        """Gets the topology_constraint of this TapiPathComputationTopologyConstraintWrapper.


        :return: The topology_constraint of this TapiPathComputationTopologyConstraintWrapper.
        :rtype: TapiPathComputationTopologyConstraint
        """
        return self._topology_constraint

    @topology_constraint.setter
    def topology_constraint(self, topology_constraint: TapiPathComputationTopologyConstraint):
        """Sets the topology_constraint of this TapiPathComputationTopologyConstraintWrapper.


        :param topology_constraint: The topology_constraint of this TapiPathComputationTopologyConstraintWrapper.
        :type topology_constraint: TapiPathComputationTopologyConstraint
        """

        self._topology_constraint = topology_constraint
