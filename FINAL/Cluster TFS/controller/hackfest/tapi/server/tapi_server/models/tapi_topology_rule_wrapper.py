# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.tapi_topology_rule import TapiTopologyRule  # noqa: F401,E501
from tapi_server import util


class TapiTopologyRuleWrapper(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, rule: TapiTopologyRule=None):  # noqa: E501
        """TapiTopologyRuleWrapper - a model defined in Swagger

        :param rule: The rule of this TapiTopologyRuleWrapper.  # noqa: E501
        :type rule: TapiTopologyRule
        """
        self.swagger_types = {
            'rule': TapiTopologyRule
        }

        self.attribute_map = {
            'rule': 'rule'
        }
        self._rule = rule

    @classmethod
    def from_dict(cls, dikt) -> 'TapiTopologyRuleWrapper':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tapi.topology.RuleWrapper of this TapiTopologyRuleWrapper.  # noqa: E501
        :rtype: TapiTopologyRuleWrapper
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule(self) -> TapiTopologyRule:
        """Gets the rule of this TapiTopologyRuleWrapper.


        :return: The rule of this TapiTopologyRuleWrapper.
        :rtype: TapiTopologyRule
        """
        return self._rule

    @rule.setter
    def rule(self, rule: TapiTopologyRule):
        """Sets the rule of this TapiTopologyRuleWrapper.


        :param rule: The rule of this TapiTopologyRuleWrapper.
        :type rule: TapiTopologyRule
        """

        self._rule = rule
