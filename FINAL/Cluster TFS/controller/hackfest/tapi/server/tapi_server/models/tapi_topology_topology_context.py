# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.tapi_topology_network_topology_service import TapiTopologyNetworkTopologyService  # noqa: F401,E501
from tapi_server.models.tapi_topology_topology import TapiTopologyTopology  # noqa: F401,E501
from tapi_server import util


class TapiTopologyTopologyContext(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, nw_topology_service: TapiTopologyNetworkTopologyService=None, topology: List[TapiTopologyTopology]=None):  # noqa: E501
        """TapiTopologyTopologyContext - a model defined in Swagger

        :param nw_topology_service: The nw_topology_service of this TapiTopologyTopologyContext.  # noqa: E501
        :type nw_topology_service: TapiTopologyNetworkTopologyService
        :param topology: The topology of this TapiTopologyTopologyContext.  # noqa: E501
        :type topology: List[TapiTopologyTopology]
        """
        self.swagger_types = {
            'nw_topology_service': TapiTopologyNetworkTopologyService,
            'topology': List[TapiTopologyTopology]
        }

        self.attribute_map = {
            'nw_topology_service': 'nw-topology-service',
            'topology': 'topology'
        }
        self._nw_topology_service = nw_topology_service
        self._topology = topology

    @classmethod
    def from_dict(cls, dikt) -> 'TapiTopologyTopologyContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tapi.topology.TopologyContext of this TapiTopologyTopologyContext.  # noqa: E501
        :rtype: TapiTopologyTopologyContext
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nw_topology_service(self) -> TapiTopologyNetworkTopologyService:
        """Gets the nw_topology_service of this TapiTopologyTopologyContext.


        :return: The nw_topology_service of this TapiTopologyTopologyContext.
        :rtype: TapiTopologyNetworkTopologyService
        """
        return self._nw_topology_service

    @nw_topology_service.setter
    def nw_topology_service(self, nw_topology_service: TapiTopologyNetworkTopologyService):
        """Sets the nw_topology_service of this TapiTopologyTopologyContext.


        :param nw_topology_service: The nw_topology_service of this TapiTopologyTopologyContext.
        :type nw_topology_service: TapiTopologyNetworkTopologyService
        """

        self._nw_topology_service = nw_topology_service

    @property
    def topology(self) -> List[TapiTopologyTopology]:
        """Gets the topology of this TapiTopologyTopologyContext.

        none  # noqa: E501

        :return: The topology of this TapiTopologyTopologyContext.
        :rtype: List[TapiTopologyTopology]
        """
        return self._topology

    @topology.setter
    def topology(self, topology: List[TapiTopologyTopology]):
        """Sets the topology of this TapiTopologyTopologyContext.

        none  # noqa: E501

        :param topology: The topology of this TapiTopologyTopologyContext.
        :type topology: List[TapiTopologyTopology]
        """

        self._topology = topology
