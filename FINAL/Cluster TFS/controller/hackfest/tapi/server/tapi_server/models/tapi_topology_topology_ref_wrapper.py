# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.tapi_topology_topology_ref import TapiTopologyTopologyRef  # noqa: F401,E501
from tapi_server import util


class TapiTopologyTopologyRefWrapper(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, topology: TapiTopologyTopologyRef=None):  # noqa: E501
        """TapiTopologyTopologyRefWrapper - a model defined in Swagger

        :param topology: The topology of this TapiTopologyTopologyRefWrapper.  # noqa: E501
        :type topology: TapiTopologyTopologyRef
        """
        self.swagger_types = {
            'topology': TapiTopologyTopologyRef
        }

        self.attribute_map = {
            'topology': 'topology'
        }
        self._topology = topology

    @classmethod
    def from_dict(cls, dikt) -> 'TapiTopologyTopologyRefWrapper':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tapi.topology.TopologyRefWrapper of this TapiTopologyTopologyRefWrapper.  # noqa: E501
        :rtype: TapiTopologyTopologyRefWrapper
        """
        return util.deserialize_model(dikt, cls)

    @property
    def topology(self) -> TapiTopologyTopologyRef:
        """Gets the topology of this TapiTopologyTopologyRefWrapper.


        :return: The topology of this TapiTopologyTopologyRefWrapper.
        :rtype: TapiTopologyTopologyRef
        """
        return self._topology

    @topology.setter
    def topology(self, topology: TapiTopologyTopologyRef):
        """Sets the topology of this TapiTopologyTopologyRefWrapper.


        :param topology: The topology of this TapiTopologyTopologyRefWrapper.
        :type topology: TapiTopologyTopologyRef
        """

        self._topology = topology
