// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kpi_sample_types.proto
package kpi_sample_types;

public final class KpiSampleTypes {

    private KpiSampleTypes() {
    }

    public static void registerAllExtensions(com.google.protobuf.ExtensionRegistryLite registry) {
    }

    public static void registerAllExtensions(com.google.protobuf.ExtensionRegistry registry) {
        registerAllExtensions((com.google.protobuf.ExtensionRegistryLite) registry);
    }

    /**
     * Protobuf enum {@code kpi_sample_types.KpiSampleType}
     */
    public enum KpiSampleType implements com.google.protobuf.ProtocolMessageEnum {

        /**
         * <code>KPISAMPLETYPE_UNKNOWN = 0;</code>
         */
        KPISAMPLETYPE_UNKNOWN(0),
        /**
         * <code>KPISAMPLETYPE_PACKETS_TRANSMITTED = 101;</code>
         */
        KPISAMPLETYPE_PACKETS_TRANSMITTED(101),
        /**
         * <code>KPISAMPLETYPE_PACKETS_RECEIVED = 102;</code>
         */
        KPISAMPLETYPE_PACKETS_RECEIVED(102),
        /**
         * <code>KPISAMPLETYPE_PACKETS_DROPPED = 103;</code>
         */
        KPISAMPLETYPE_PACKETS_DROPPED(103),
        /**
         * <code>KPISAMPLETYPE_BYTES_TRANSMITTED = 201;</code>
         */
        KPISAMPLETYPE_BYTES_TRANSMITTED(201),
        /**
         * <code>KPISAMPLETYPE_BYTES_RECEIVED = 202;</code>
         */
        KPISAMPLETYPE_BYTES_RECEIVED(202),
        /**
         * <code>KPISAMPLETYPE_BYTES_DROPPED = 203;</code>
         */
        KPISAMPLETYPE_BYTES_DROPPED(203),
        /**
         * <code>KPISAMPLETYPE_LINK_TOTAL_CAPACITY_GBPS = 301;</code>
         */
        KPISAMPLETYPE_LINK_TOTAL_CAPACITY_GBPS(301),
        /**
         * <code>KPISAMPLETYPE_LINK_USED_CAPACITY_GBPS = 302;</code>
         */
        KPISAMPLETYPE_LINK_USED_CAPACITY_GBPS(302),
        /**
         *  <pre>
         * . can be used by both optical and L3 without any issue
         *  </pre>
         *
         *  <code>KPISAMPLETYPE_ML_CONFIDENCE = 401;</code>
         */
        KPISAMPLETYPE_ML_CONFIDENCE(401),
        /**
         *  <pre>
         * . can be used by both optical and L3 without any issue
         *  </pre>
         *
         *  <code>KPISAMPLETYPE_OPTICAL_SECURITY_STATUS = 501;</code>
         */
        KPISAMPLETYPE_OPTICAL_SECURITY_STATUS(501),
        /**
         * <code>KPISAMPLETYPE_L3_UNIQUE_ATTACK_CONNS = 601;</code>
         */
        KPISAMPLETYPE_L3_UNIQUE_ATTACK_CONNS(601),
        /**
         * <code>KPISAMPLETYPE_L3_TOTAL_DROPPED_PACKTS = 602;</code>
         */
        KPISAMPLETYPE_L3_TOTAL_DROPPED_PACKTS(602),
        /**
         * <code>KPISAMPLETYPE_L3_UNIQUE_ATTACKERS = 603;</code>
         */
        KPISAMPLETYPE_L3_UNIQUE_ATTACKERS(603),
        /**
         * <code>KPISAMPLETYPE_L3_UNIQUE_COMPROMISED_CLIENTS = 604;</code>
         */
        KPISAMPLETYPE_L3_UNIQUE_COMPROMISED_CLIENTS(604),
        /**
         * <code>KPISAMPLETYPE_L3_SECURITY_STATUS_CRYPTO = 605;</code>
         */
        KPISAMPLETYPE_L3_SECURITY_STATUS_CRYPTO(605),
        /**
         * <code>KPISAMPLETYPE_SERVICE_LATENCY_MS = 701;</code>
         */
        KPISAMPLETYPE_SERVICE_LATENCY_MS(701),
        UNRECOGNIZED(-1);

        /**
         * <code>KPISAMPLETYPE_UNKNOWN = 0;</code>
         */
        public static final int KPISAMPLETYPE_UNKNOWN_VALUE = 0;

        /**
         * <code>KPISAMPLETYPE_PACKETS_TRANSMITTED = 101;</code>
         */
        public static final int KPISAMPLETYPE_PACKETS_TRANSMITTED_VALUE = 101;

        /**
         * <code>KPISAMPLETYPE_PACKETS_RECEIVED = 102;</code>
         */
        public static final int KPISAMPLETYPE_PACKETS_RECEIVED_VALUE = 102;

        /**
         * <code>KPISAMPLETYPE_PACKETS_DROPPED = 103;</code>
         */
        public static final int KPISAMPLETYPE_PACKETS_DROPPED_VALUE = 103;

        /**
         * <code>KPISAMPLETYPE_BYTES_TRANSMITTED = 201;</code>
         */
        public static final int KPISAMPLETYPE_BYTES_TRANSMITTED_VALUE = 201;

        /**
         * <code>KPISAMPLETYPE_BYTES_RECEIVED = 202;</code>
         */
        public static final int KPISAMPLETYPE_BYTES_RECEIVED_VALUE = 202;

        /**
         * <code>KPISAMPLETYPE_BYTES_DROPPED = 203;</code>
         */
        public static final int KPISAMPLETYPE_BYTES_DROPPED_VALUE = 203;

        /**
         * <code>KPISAMPLETYPE_LINK_TOTAL_CAPACITY_GBPS = 301;</code>
         */
        public static final int KPISAMPLETYPE_LINK_TOTAL_CAPACITY_GBPS_VALUE = 301;

        /**
         * <code>KPISAMPLETYPE_LINK_USED_CAPACITY_GBPS = 302;</code>
         */
        public static final int KPISAMPLETYPE_LINK_USED_CAPACITY_GBPS_VALUE = 302;

        /**
         *  <pre>
         * . can be used by both optical and L3 without any issue
         *  </pre>
         *
         *  <code>KPISAMPLETYPE_ML_CONFIDENCE = 401;</code>
         */
        public static final int KPISAMPLETYPE_ML_CONFIDENCE_VALUE = 401;

        /**
         *  <pre>
         * . can be used by both optical and L3 without any issue
         *  </pre>
         *
         *  <code>KPISAMPLETYPE_OPTICAL_SECURITY_STATUS = 501;</code>
         */
        public static final int KPISAMPLETYPE_OPTICAL_SECURITY_STATUS_VALUE = 501;

        /**
         * <code>KPISAMPLETYPE_L3_UNIQUE_ATTACK_CONNS = 601;</code>
         */
        public static final int KPISAMPLETYPE_L3_UNIQUE_ATTACK_CONNS_VALUE = 601;

        /**
         * <code>KPISAMPLETYPE_L3_TOTAL_DROPPED_PACKTS = 602;</code>
         */
        public static final int KPISAMPLETYPE_L3_TOTAL_DROPPED_PACKTS_VALUE = 602;

        /**
         * <code>KPISAMPLETYPE_L3_UNIQUE_ATTACKERS = 603;</code>
         */
        public static final int KPISAMPLETYPE_L3_UNIQUE_ATTACKERS_VALUE = 603;

        /**
         * <code>KPISAMPLETYPE_L3_UNIQUE_COMPROMISED_CLIENTS = 604;</code>
         */
        public static final int KPISAMPLETYPE_L3_UNIQUE_COMPROMISED_CLIENTS_VALUE = 604;

        /**
         * <code>KPISAMPLETYPE_L3_SECURITY_STATUS_CRYPTO = 605;</code>
         */
        public static final int KPISAMPLETYPE_L3_SECURITY_STATUS_CRYPTO_VALUE = 605;

        /**
         * <code>KPISAMPLETYPE_SERVICE_LATENCY_MS = 701;</code>
         */
        public static final int KPISAMPLETYPE_SERVICE_LATENCY_MS_VALUE = 701;

        public final int getNumber() {
            if (this == UNRECOGNIZED) {
                throw new java.lang.IllegalArgumentException("Can't get the number of an unknown enum value.");
            }
            return value;
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static KpiSampleType valueOf(int value) {
            return forNumber(value);
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         */
        public static KpiSampleType forNumber(int value) {
            switch(value) {
                case 0:
                    return KPISAMPLETYPE_UNKNOWN;
                case 101:
                    return KPISAMPLETYPE_PACKETS_TRANSMITTED;
                case 102:
                    return KPISAMPLETYPE_PACKETS_RECEIVED;
                case 103:
                    return KPISAMPLETYPE_PACKETS_DROPPED;
                case 201:
                    return KPISAMPLETYPE_BYTES_TRANSMITTED;
                case 202:
                    return KPISAMPLETYPE_BYTES_RECEIVED;
                case 203:
                    return KPISAMPLETYPE_BYTES_DROPPED;
                case 301:
                    return KPISAMPLETYPE_LINK_TOTAL_CAPACITY_GBPS;
                case 302:
                    return KPISAMPLETYPE_LINK_USED_CAPACITY_GBPS;
                case 401:
                    return KPISAMPLETYPE_ML_CONFIDENCE;
                case 501:
                    return KPISAMPLETYPE_OPTICAL_SECURITY_STATUS;
                case 601:
                    return KPISAMPLETYPE_L3_UNIQUE_ATTACK_CONNS;
                case 602:
                    return KPISAMPLETYPE_L3_TOTAL_DROPPED_PACKTS;
                case 603:
                    return KPISAMPLETYPE_L3_UNIQUE_ATTACKERS;
                case 604:
                    return KPISAMPLETYPE_L3_UNIQUE_COMPROMISED_CLIENTS;
                case 605:
                    return KPISAMPLETYPE_L3_SECURITY_STATUS_CRYPTO;
                case 701:
                    return KPISAMPLETYPE_SERVICE_LATENCY_MS;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<KpiSampleType> internalGetValueMap() {
            return internalValueMap;
        }

        private static final com.google.protobuf.Internal.EnumLiteMap<KpiSampleType> internalValueMap = new com.google.protobuf.Internal.EnumLiteMap<KpiSampleType>() {

            public KpiSampleType findValueByNumber(int number) {
                return KpiSampleType.forNumber(number);
            }
        };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
            if (this == UNRECOGNIZED) {
                throw new java.lang.IllegalStateException("Can't get the descriptor of an unrecognized enum value.");
            }
            return getDescriptor().getValues().get(ordinal());
        }

        public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
            return getDescriptor();
        }

        public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
            return kpi_sample_types.KpiSampleTypes.getDescriptor().getEnumTypes().get(0);
        }

        private static final KpiSampleType[] VALUES = values();

        public static KpiSampleType valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
            }
            if (desc.getIndex() == -1) {
                return UNRECOGNIZED;
            }
            return VALUES[desc.getIndex()];
        }

        private final int value;

        private KpiSampleType(int value) {
            this.value = value;
        }
    }

    public static com.google.protobuf.Descriptors.FileDescriptor getDescriptor() {
        return descriptor;
    }

    private static com.google.protobuf.Descriptors.FileDescriptor descriptor;

    static {
        java.lang.String[] descriptorData = { "\n\026kpi_sample_types.proto\022\020kpi_sample_typ" + "es*\260\005\n\rKpiSampleType\022\031\n\025KPISAMPLETYPE_UN" + "KNOWN\020\000\022%\n!KPISAMPLETYPE_PACKETS_TRANSMI" + "TTED\020e\022\"\n\036KPISAMPLETYPE_PACKETS_RECEIVED" + "\020f\022!\n\035KPISAMPLETYPE_PACKETS_DROPPED\020g\022$\n" + "\037KPISAMPLETYPE_BYTES_TRANSMITTED\020\311\001\022!\n\034K" + "PISAMPLETYPE_BYTES_RECEIVED\020\312\001\022 \n\033KPISAM" + "PLETYPE_BYTES_DROPPED\020\313\001\022+\n&KPISAMPLETYP" + "E_LINK_TOTAL_CAPACITY_GBPS\020\255\002\022*\n%KPISAMP" + "LETYPE_LINK_USED_CAPACITY_GBPS\020\256\002\022 \n\033KPI" + "SAMPLETYPE_ML_CONFIDENCE\020\221\003\022*\n%KPISAMPLE" + "TYPE_OPTICAL_SECURITY_STATUS\020\365\003\022)\n$KPISA" + "MPLETYPE_L3_UNIQUE_ATTACK_CONNS\020\331\004\022*\n%KP" + "ISAMPLETYPE_L3_TOTAL_DROPPED_PACKTS\020\332\004\022&" + "\n!KPISAMPLETYPE_L3_UNIQUE_ATTACKERS\020\333\004\0220" + "\n+KPISAMPLETYPE_L3_UNIQUE_COMPROMISED_CL" + "IENTS\020\334\004\022,\n\'KPISAMPLETYPE_L3_SECURITY_ST" + "ATUS_CRYPTO\020\335\004\022%\n KPISAMPLETYPE_SERVICE_" + "LATENCY_MS\020\275\005b\006proto3" };
        descriptor = com.google.protobuf.Descriptors.FileDescriptor.internalBuildGeneratedFileFrom(descriptorData, new com.google.protobuf.Descriptors.FileDescriptor[] {});
    }
    // @@protoc_insertion_point(outer_class_scope)
}
